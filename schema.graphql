type TokenLaunch @entity {
  id: ID!
  address: String! # The launched token address as string for search
  addressBytes: Bytes! # The raw token address bytes
  createdAtBlock: BigInt!
  createdAtTx: Bytes!
  tokenCreator: String! # Creator address as string for search
  tokenCreatorBytes: Bytes! # The raw creator address bytes
  timestamp: BigInt!
  
  # Launch function parameters
  name: String!
  ticker: String!
  cores: [Int!]!
  description: String!
  imageUrl: String!
  urls: [String!]!
  purchaseAmount: BigInt!
}

type Swap @entity(immutable: true) {
  id: Bytes! # Transaction hash
  timestamp: BigInt!
  block: BigInt!
  trader: Bytes!
  tokenIn: Bytes!
  tokenOut: Bytes!
  amountIn: BigInt!
  amountOut: BigInt!
  feeAmount: BigInt!
  feeRecipient: Bytes!
  type: String! # "BUY" or "SELL"
}

type TokenSupply @entity {
  id: Bytes!          # Token address
  circulatingSupply: BigDecimal!
  totalSupply: BigDecimal!    # Track total supply separately
  decimals: Int!             # Store token decimals
  lastUpdateBlock: BigInt!
  lastUpdateTimestamp: BigInt!
  isUSDPair: Boolean!        # Flag if this token is paired with USD
  lastPriceUSD: BigDecimal!  # Last known USD price
  lastPriceUpdateBlock: BigInt! # Block when price was last updated
}

type TradeSnapshot @entity(immutable: true) {
  id: Bytes!          # Concatenated token address, timestamp, and tx hash
  token: Bytes!
  timestamp: BigInt!
  transaction: Bytes!
  trader: Bytes!
  
  # Trade data
  type: String!      # "BUY" or "SELL"
  volumeToken: BigDecimal!
  volumeUSD: BigDecimal!
  priceUSD: BigDecimal!
  
  # Market state at time of trade
  marketCap: BigDecimal!
  circulatingSupply: BigDecimal!
}

type TokenDayStats @entity(immutable: true) {
  id: Bytes!          # Concatenated token address and day timestamp
  token: Bytes!
  date: BigInt!
  
  # Price metrics
  openPrice: BigDecimal!
  closePrice: BigDecimal!
  highPrice: BigDecimal!
  lowPrice: BigDecimal!
  priceChange: BigDecimal! # Percentage change from previous day
  
  # Volume metrics
  volumeToken: BigDecimal!
  volumeUSD: BigDecimal!
  volumeChange: BigDecimal! # 24h change
  
  # Trade metrics
  txCount: Int!
  buyCount: Int!
  sellCount: Int!
  uniqueTraderCount: Int!
  
  # Market metrics
  marketCap: BigDecimal!
  circulatingSupply: BigDecimal!
  
  # Additional metrics
  averageTradeSize: BigDecimal!
  largestTrade: BigDecimal!
  smallestTrade: BigDecimal!
  volatility: BigDecimal!     # Standard deviation of price changes
  buyRatio: BigDecimal!       # buyCount / txCount
  averageHoldTime: BigInt!    # Average time between buys and sells
  traderRetention: BigDecimal! # Returning traders / total traders
  
  # Enhanced price analytics
  priceVolatility: BigDecimal!      # Standard deviation of price changes within the day
  priceMovementCount: Int!          # Number of price direction changes
  longestPriceUptrend: Int!         # Longest consecutive price increase streak
  longestPriceDowntrend: Int!       # Longest consecutive price decrease streak
  averagePriceImpact: BigDecimal!   # Average price change per trade
  volumeWeightedPrice: BigDecimal!   # VWAP for more accurate price representation
  
  # Enhanced volume analytics
  largeTradeCount: Int!             # Number of trades above average size
  buyVolumeRatio: BigDecimal!       # Buy volume / total volume
  
  # Market health metrics
  liquidityScore: BigDecimal!       # Based on trade size impact on price
  marketEfficiency: BigDecimal!     # Price consistency across trades
  buyPressure: BigDecimal!          # Buy volume vs sell volume trend
  marketDepth: BigDecimal!          # Average trade size possible without significant price impact
  
  # Time-based analytics
  peakTradingHour: Int!             # Hour with highest volume
  quietTradingHour: Int!            # Hour with lowest volume
}

type TokenTraderStats @entity {
  id: Bytes! # Concatenated token address, day timestamp, and trader address
  token: Bytes!
  trader: Bytes!
  date: BigInt!
  
  # Trading activity
  txCount: Int!
  volumeToken: BigDecimal!
  volumeUSD: BigDecimal!
  
  # Trade types
  buyCount: Int!
  sellCount: Int!
  
  # Profitability metrics
  realizedPnL: BigDecimal!          # Realized profit/loss in USD
  averageEntryPrice: BigDecimal!
  averageExitPrice: BigDecimal!
  holdTime: BigInt!                 # Time between first and last trade of the day
  
  # Enhanced trader analytics
  tradeFrequency: BigDecimal!       # Average time between trades
  profitabilityRatio: BigDecimal!   # Profitable trades / total trades
  averagePositionSize: BigDecimal!  # Average amount per trade
  maxDrawdown: BigDecimal!          # Largest peak-to-trough decline
  winningStreak: Int!               # Longest streak of profitable trades
  losingStreak: Int!                # Longest streak of unprofitable trades
}

type Agent @entity {
  id: ID!
  virtualId: BigInt!
  founder: Bytes!
  dao: Bytes!
  token: Bytes!
  tba: Bytes!
  coreTypes: [Int!]!
  createdAt: BigInt!
  maturityScore: BigInt!
  graduatedToUniswap: Boolean!
  graduationTimestamp: BigInt
  totalStaked: BigDecimal!
  uniqueStakers: BigInt!
  stakingRewardsDistributed: BigDecimal!
  
  # Performance Fields
  graduationProgress: BigDecimal!
  serviceSuccessRate: BigDecimal!
  performanceRank: BigInt!
  lastRankUpdate: BigInt!
  servicesArray: [String!]! # Store service IDs as strings
  
  # Global Rankings
  impactRank: BigInt!
  stakeRank: BigInt!
  rewardRank: BigInt!
  validatorRank: BigInt!
  historicalRanks: [RankSnapshot!]! @derivedFrom(field: "agent")
  
  # Core-specific Rankings
  coreTypeRanks: [CoreTypeRank!]! @derivedFrom(field: "agent")
  
  # Market Impact Metrics
  priceImpactScore: BigDecimal!
  marketStability: BigDecimal!
  liquidityProviderCount: BigInt!
  averageTradeImpact: BigDecimal!
  postGraduationMetrics: GraduationMarketImpact
  
  # Additional Analytics Fields
  averageStakeDuration: BigInt!
  stakingAPY: BigDecimal!
  validatorCount: BigInt!
  activeValidatorCount: BigInt!
  totalServiceImpact: BigDecimal!
  averageServiceImpact: BigDecimal!
  lastServiceTimestamp: BigInt!
  contributionAcceptanceRate: BigDecimal!
  
  # Pre-calculated Performance Metrics
  hourlyStakingYield: BigDecimal!
  dailyStakingYield: BigDecimal!
  weeklyStakingYield: BigDecimal!
  monthlyStakingYield: BigDecimal!
  
  # Service Performance
  serviceCount: BigInt!
  successfulServiceCount: BigInt!
  failedServiceCount: BigInt!
  averageServiceMaturityScore: BigDecimal!
  
  # Validator Performance
  averageValidatorScore: BigDecimal!
  validatorSuccessRate: BigDecimal!
  totalValidations: BigInt!
  
  # Staking Metrics
  minStakeAmount: BigDecimal!
  maxStakeAmount: BigDecimal!
  medianStakeAmount: BigDecimal!
  stakingGrowthRate: BigDecimal!
  
  # Time-weighted Metrics
  timeWeightedStake: BigDecimal!
  timeWeightedImpact: BigDecimal!
  
  # Distribution Statistics
  stakeDistributionP25: BigDecimal! # 25th percentile
  stakeDistributionP50: BigDecimal! # Median
  stakeDistributionP75: BigDecimal! # 75th percentile
  stakeDistributionStdDev: BigDecimal!
  
  # New fields for enhanced analytics
  marketHealthScore: BigDecimal!
  networkGrowthContribution: BigDecimal!
  predictedGraduationTimestamp: BigInt
  graduationConfidence: BigDecimal!
  
  # Relationships
  validators: [Validator!]! @derivedFrom(field: "agent")
  contributions: [Contribution!]! @derivedFrom(field: "agent")
  services: [Service!]! @derivedFrom(field: "agent")
  dailySnapshots: [AgentDayData!]! @derivedFrom(field: "agent")
  historicalMaturityScores: [MaturityScoreSnapshot!]! @derivedFrom(field: "agent")
  marketHealthHistory: [MarketHealthSnapshot!]! @derivedFrom(field: "agent")
  graduationPredictions: [GraduationPrediction!]! @derivedFrom(field: "agent")
}

type MaturityScoreSnapshot @entity(immutable: true) {
  id: ID!
  agent: Agent!
  timestamp: BigInt!
  score: BigInt!
  blockNumber: BigInt!
  growthRate: BigDecimal!
}

type Validator @entity {
  id: ID!
  agent: Agent!
  address: Bytes!
  score: BigInt!
  totalRewardsEarned: BigDecimal!
  validationCount: BigInt!
  lastActiveTimestamp: BigInt!
  
  # New fields for enhanced analytics
  networkMetrics: ValidatorNetwork! @derivedFrom(field: "validator")
  crossAgentPerformance: BigDecimal!
  specializationScore: BigDecimal!
}

type Contribution @entity {
  id: ID!
  agent: Agent!
  contributor: Bytes!
  parentContribution: Contribution
  childContributions: [Contribution!]! @derivedFrom(field: "parentContribution")
  coreType: Int!
  timestamp: BigInt!
  accepted: Boolean!
  service: Service
}

type Service @entity {
  id: ID!
  agent: Agent!
  contribution: Contribution!
  maturityScore: BigInt!
  impact: BigDecimal!
  coreType: Int!
  timestamp: BigInt!
  rewardsGenerated: BigDecimal!
  
  # Economic Impact Fields
  priceImpact: BigDecimal!
  rewardEfficiency: BigDecimal!
  liquidityEffect: BigDecimal!
  token: Bytes # Store the token address
}

type RankSnapshot @entity(immutable: true) {
  id: ID! # Concatenated agent ID and timestamp
  agent: Agent!
  timestamp: BigInt!
  impactRank: BigInt!
  stakeRank: BigInt!
  rewardRank: BigInt!
  validatorRank: BigInt!
  totalRank: BigInt! # Combined ranking score
  rankingFactors: [BigDecimal!]! # Weights used for ranking
}

type CoreTypeRank @entity {
  id: ID! # Concatenated agent ID and core type
  agent: Agent!
  coreType: Int!
  rank: BigInt!
  score: BigDecimal!
  totalServices: BigInt!
  successRate: BigDecimal!
  averageImpact: BigDecimal!
  lastUpdated: BigInt!
}

type GraduationMarketImpact @entity {
  id: ID!
  agent: Agent!
  graduationTimestamp: BigInt!
  priceBeforeGraduation: BigDecimal!
  priceAfterGraduation: BigDecimal!
  volumeBeforeGraduation: BigDecimal!
  volumeAfterGraduation: BigDecimal!
  liquidityBeforeGraduation: BigDecimal!
  liquidityAfterGraduation: BigDecimal!
  stakingBehaviorChange: BigDecimal!
  validatorParticipationChange: BigDecimal!
  marketEfficiencyChange: BigDecimal!
}

type TokenEconomics @entity {
  id: ID!
  token: Bytes!
  updateTimestamp: BigInt!
  
  # Liquidity Metrics
  liquidityDepth: BigDecimal!
  liquidityUtilization: BigDecimal!
  
  # Velocity Metrics
  tokenVelocity: BigDecimal!
  holdingTimeAverage: BigInt!
  
  # Distribution Metrics
  rewardDistributionEfficiency: BigDecimal!
  stakingYield: BigDecimal!
  validatorYield: BigDecimal!
  
  # Pre-calculated Statistics
  liquidityScore: BigDecimal!
  marketEfficiency: BigDecimal!
  volumeWeightedPrice: BigDecimal!
  
  # Time-series Metrics
  hourlyVolumeAverage: BigDecimal!
  dailyVolumeAverage: BigDecimal!
  weeklyVolumeAverage: BigDecimal!
  
  # Running Totals
  totalTransactions: BigInt!
  totalVolume: BigDecimal!
  totalRewardsDistributed: BigDecimal!
  
  # Market Impact Metrics
  priceStability: BigDecimal!
  liquidityProviderConcentration: BigDecimal!
  tradeImpactAverage: BigDecimal!
  marketMaturityScore: BigDecimal!
  stakingEfficiency: BigDecimal!
}

type EconomicSnapshot @entity(immutable: true) {
  id: ID!
  token: Bytes!
  timestamp: BigInt!
  dayNumber: Int! # Days since epoch for easier querying
  
  priceUSD: BigDecimal!
  liquidityDepth: BigDecimal!
  tokenVelocity: BigDecimal!
  rewardEfficiency: BigDecimal!
  
  # Pre-calculated Changes
  priceChangePercent: BigDecimal!
  liquidityChangePercent: BigDecimal!
  velocityChangePercent: BigDecimal!
  
  # Running Totals
  cumulativeVolume: BigDecimal!
  cumulativeRewards: BigDecimal!
  
  triggerType: String!
  triggerAddress: Bytes!
}

type AgentDayData @entity {
  id: ID!
  agent: Agent!
  date: BigInt!
  dayNumber: Int! # Days since epoch for easier querying
  
  # Staking metrics
  dailyStakeAmount: BigDecimal!
  dailyUnstakeAmount: BigDecimal!
  netStakingChange: BigDecimal!
  uniqueDailyStakers: BigInt!
  averageStakeSize: BigDecimal!
  
  # Service metrics
  newContributions: BigInt!
  acceptedServices: BigInt!
  dailyImpactScore: BigDecimal!
  
  # Reward metrics
  dailyRewardsGenerated: BigDecimal!
  stakersRewards: BigDecimal!
  validatorsRewards: BigDecimal!
  contributorsRewards: BigDecimal!
  protocolRewards: BigDecimal!
  rewardPerStake: BigDecimal!
  
  # Validator metrics
  activeValidators: BigInt!
  averageValidatorScore: BigDecimal!
  validationsPerValidator: BigDecimal!
  
  # Performance Fields
  maturityScoreChange: BigDecimal!
  serviceSuccessCount: BigInt!
  serviceFailureCount: BigInt!
  dailySuccessRate: BigDecimal!
  performanceScore: BigDecimal!
  
  # Distribution Arrays
  stakeSizeDistribution: [BigDecimal!]!
  impactScoreDistribution: [BigDecimal!]!
  validatorScoreDistribution: [BigDecimal!]!
  
  # Pre-calculated Statistics
  stakeSizeMin: BigDecimal!
  stakeSizeMax: BigDecimal!
  stakeSizeMedian: BigDecimal!
  stakeSizeStdDev: BigDecimal!
  
  impactScoreMin: BigDecimal!
  impactScoreMax: BigDecimal!
  impactScoreMedian: BigDecimal!
  impactScoreStdDev: BigDecimal!
  
  validatorScoreMin: BigDecimal!
  validatorScoreMax: BigDecimal!
  validatorScoreMedian: BigDecimal!
  validatorScoreStdDev: BigDecimal!
  
  # Period-over-Period Changes
  stakeChangePercent: BigDecimal!
  impactChangePercent: BigDecimal!
  rewardChangePercent: BigDecimal!
  
  # Running Totals
  cumulativeStake: BigDecimal!
  cumulativeRewards: BigDecimal!
  cumulativeImpact: BigDecimal!
}

# New types for enhanced analytics
type NetworkMetrics @entity {
  id: ID!
  timestamp: BigInt!
  
  # Growth Metrics
  newAgentsCount: Int!
  newValidatorsCount: Int!
  newServicesCount: Int!
  networkGrowthRate: BigDecimal!
  
  # Health Metrics
  marketHealthScore: BigDecimal!
  validatorParticipationRate: BigDecimal!
  averageValidationFrequency: BigDecimal!
  
  # Volume Metrics
  totalVolumeUSD: BigDecimal!
  volumeWeightedPrice: BigDecimal!
  buyPressure: BigDecimal!
  sellPressure: BigDecimal!
  
  # Graduation Metrics
  averageGraduationTime: BigInt!
  graduationPredictions: [GraduationPrediction!]! @derivedFrom(field: "networkMetrics")
}

type GraduationPrediction @entity {
  id: ID!
  networkMetrics: NetworkMetrics!
  agent: Agent!
  predictedGraduationTimestamp: BigInt!
  confidenceScore: BigDecimal!
  currentProgress: BigDecimal!
  progressRate: BigDecimal!
  factorsContributing: [String!]!
}

type ValidatorNetwork @entity {
  id: ID!
  validator: Validator!
  crossAgentValidations: Int!
  uniqueAgentsValidated: Int!
  specialization: [Int!]! # Core types specialized in
  validationSuccessRate: BigDecimal!
  averageValidationImpact: BigDecimal!
  networkInfluenceScore: BigDecimal!
  lastUpdated: BigInt!
}

type MarketHealthSnapshot @entity(immutable: true) {
  id: ID!
  timestamp: BigInt!
  agent: Agent!
  
  # Market Health Components
  priceStability: BigDecimal!
  liquidityDepth: BigDecimal!
  validatorParticipation: BigDecimal!
  stakingEfficiency: BigDecimal!
  serviceSuccessRate: BigDecimal!
  
  # Composite Scores
  overallHealthScore: BigDecimal!
  marketMaturityScore: BigDecimal!
  networkEffectScore: BigDecimal!
  
  # Trading Metrics
  volumeWeightedPrice: BigDecimal!
  largeTradeImpact: BigDecimal!
  buyPressure: BigDecimal!
  sellPressure: BigDecimal!
}

type _Schema_
@fulltext(
  name: "tokenLaunchSearch"
  language: en
  algorithm: rank
  include: [
    {
      entity: "TokenLaunch",
      fields: [
        { name: "address" },
        { name: "tokenCreator" },
        { name: "name" },
        { name: "ticker" },
        { name: "description" }
      ]
    }
  ]
)
